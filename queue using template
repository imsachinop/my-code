#include <iostream>
using namespace std;

template <typename T>
class node {
public:
    T data;
    node *next;

    node(T data) {
        this->data = data;
        this->next = nullptr;
    }
};

template <typename T>
class queue {
    node<T> *head;
    node<T> *tail;
    int size;

public:
    queue() {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }

    int getsize() {
        return size;
    }

    bool isempty() {
        return size == 0;
    }

    T front() {
        if (isempty()) {
            cout << "Queue is empty" << endl;
            return 0;  // Return a default value or throw an exception
        }
        return head->data;
    }

    void enqueue(T element) {
        node<T> *newnode = new node<T>(element);
        if (head == nullptr) {
            head = newnode;
            tail = newnode;
        } else {
            tail->next = newnode;
            tail = tail->next;
        }
        size++;
    }

    T dequeue() {
        if (isempty()) {
            cout << "Queue is empty" << endl;
            return 0;  // Return a default value or throw an exception
        }
        T temp = head->data;
        node<T> *oldhead = head;
        head = head->next;
        delete oldhead;
        size--;
        if (size == 0) {
            tail = nullptr;  // Reset tail when the queue is empty
        }
        return temp;
    }
};

int main() {
    queue<int> q1;
    q1.enqueue(10);
    cout << q1.front() << endl;
    q1.enqueue(20);
    cout << q1.front() << endl;
    q1.enqueue(30);
    q1.dequeue();
    cout << q1.front() << endl;

    return 0;
}
